# Generated by Django 4.2.5 on 2023-09-24 21:10

import accounts.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('username', models.CharField(max_length=31, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator(), django.core.validators.RegexValidator(message='\n    Usernames can contain characters a-z, 0-9, underscores and periods. \n    The username cannot start with a period nor end with a period. \n    It must also not have more than one period sequentially. \n    Max length is 31 chars.\n    ', regex='^(?!.*\\.\\.)(?!.*\\.$)[^\\W][\\w.]{0,30}$')], verbose_name='username')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='email address')),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=31, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=31, null=True, verbose_name='last name')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='address')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=accounts.models.upload_image)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
